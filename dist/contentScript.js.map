{"version":3,"file":"contentScript.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://detoxyt/webpack/bootstrap","webpack://detoxyt/webpack/runtime/make namespace object","webpack://detoxyt/./src/contentScript/contentScript.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","let currentTopic = \"\";\r\nlet totalRelatedVideosCount = 0;\r\nlet hasFetched = false;\r\nchrome.storage.sync.get([\"topic\"], (result) => {\r\n  if (result) {\r\n    currentTopic = result.topic;\r\n    console.log(`current topic is ${currentTopic}`);\r\n    runCleanup();\r\n  }\r\n});\r\nconsole.log(\"welcome to content script\");\r\n\r\nconst SELECTORS = {\r\n  shorts: {\r\n    sidebarLink: 'a[title=\"Shorts\"]',\r\n    shelf: \"ytd-rich-shelf-renderer[is-shorts]\",\r\n  },\r\n  sidebars: {\r\n    main: \"ytd-guide-renderer\",\r\n    mini: \"ytd-mini-guide-renderer\",\r\n    secondary: \"ytd-watch-next-secondary-results-renderer\",\r\n    topicFilters: \"iron-selector\",\r\n  },\r\n  videos: {\r\n    video: \"ytd-rich-item-renderer\",\r\n  },\r\n};\r\n\r\nconst hideElement = (selector: string) => {\r\n  if (selector == SELECTORS.shorts.shelf) {\r\n    const elements = document.querySelectorAll(selector);\r\n    if (elements) {\r\n      elements.forEach((container) => {\r\n        if ((container as HTMLElement).style.display != \"none\")\r\n          (container as HTMLElement).style.display = \"none\";\r\n      });\r\n    }\r\n  } else if (selector == SELECTORS.videos.video) {\r\n    const element = document.querySelectorAll(selector);\r\n    element.forEach((container) => {\r\n      const title = (container as HTMLElement).innerText || \"\";\r\n      if (currentTopic) {\r\n        if (!title.toLowerCase().includes(currentTopic.toLowerCase())) {\r\n          (container as HTMLElement).style.display = \"none\";\r\n        } else totalRelatedVideosCount++;\r\n      }\r\n    });\r\n  } else {\r\n    const element = document.querySelector(selector) as HTMLElement;\r\n    if (element && element.style.display != \"none\") {\r\n      element.style.display = \"none\";\r\n    }\r\n  }\r\n};\r\n\r\nconst runCleanup = () => {\r\n  hideElement(SELECTORS.shorts.sidebarLink);\r\n  hideElement(SELECTORS.shorts.shelf);\r\n  hideElement(SELECTORS.sidebars.main);\r\n  hideElement(SELECTORS.sidebars.mini);\r\n  hideElement(SELECTORS.sidebars.secondary);\r\n  hideElement(SELECTORS.sidebars.topicFilters);\r\n  hideElement(SELECTORS.videos.video);\r\n\r\n  if (\r\n    totalRelatedVideosCount < 5 &&\r\n    hasFetched == false &&\r\n    currentTopic != \"\"\r\n  ) {\r\n    hasFetched = true;\r\n    console.log(\"less video\");\r\n    console.log(`current topic is ${currentTopic}`);\r\n\r\n    chrome.runtime.sendMessage(\r\n      {\r\n        type: \"FETCH_VIDEOS\",\r\n        topic: currentTopic,\r\n      },\r\n      (reponse) => {\r\n        if (chrome.runtime.lastError) {\r\n          console.log(\"error occured\");\r\n          console.error(chrome.runtime.lastError.message);\r\n        } else {\r\n          console.log(reponse);\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nconst observer = new MutationObserver(runCleanup);\r\nobserver.observe(document.body, {\r\n  childList: true,\r\n  subtree: true,\r\n});\r\nrunCleanup();\r\n\r\nchrome.runtime.onMessage.addListener((msg, sender, sendReponse) => {\r\n  console.log(\"message arrived\");\r\n  console.log(msg);\r\n  console.log(\"sender is\");\r\n  console.log(sender);\r\n  sendReponse({ status: \"Topic recevied, page will reload. \" });\r\n  return true;\r\n});\r\n"],"names":[],"sourceRoot":""}